From bbbf6cd702ac6370c9fa44a9d9a09a7834dc823d Mon Sep 17 00:00:00 2001
From: Florin Sarbu <florin@balena.io>
Date: Mon, 31 Jan 2022 11:40:09 +0100
Subject: [PATCH] net: phy: motorcomm: Add YT8521 support

This adds basic support for the Motorcomm YT8521 Gigabit Ethernet PHY.

Signed-off-by: Walker Chen <walker.chen@starfivetech.com>
Signed-off-by: Emil Renner Berthing <kernel@esmil.dk>

This is a backport of commit https://github.com/esmil/linux/commit/658542f784ab519945ff535fbf60096edc067a2f

Upstream-Status: Backport
Signed-off-by: Florin Sarbu <florin@balena.io>
---
 drivers/net/phy/Kconfig     |  2 +-
 drivers/net/phy/motorcomm.c | 68 +++++++++++++++++++++++++++++++++++++
 2 files changed, 69 insertions(+), 1 deletion(-)

diff --git a/drivers/net/phy/Kconfig b/drivers/net/phy/Kconfig
index c5080fc975b7..cb98eb33ae0d 100644
--- a/drivers/net/phy/Kconfig
+++ b/drivers/net/phy/Kconfig
@@ -469,7 +469,7 @@ config MOTORCOMM_PHY
 	tristate "Motorcomm PHYs"
 	help
 	  Enables support for Motorcomm network PHYs.
-	  Currently supports the YT8511 gigabit PHY.
+	  Currently supports the YT8511 and YT8521 gigabit PHYs.
 
 config NATIONAL_PHY
 	tristate "National Semiconductor PHYs"
diff --git a/drivers/net/phy/motorcomm.c b/drivers/net/phy/motorcomm.c
index 7e6ac2c5e27e..2815e3c68bf8 100644
--- a/drivers/net/phy/motorcomm.c
+++ b/drivers/net/phy/motorcomm.c
@@ -10,6 +10,7 @@
 #include <linux/phy.h>
 
 #define PHY_ID_YT8511		0x0000010a
+#define PHY_ID_YT8521		0x0000011a
 
 #define YT8511_PAGE_SELECT	0x1e
 #define YT8511_PAGE		0x1f
@@ -17,6 +18,10 @@
 #define YT8511_EXT_DELAY_DRIVE	0x0d
 #define YT8511_EXT_SLEEP_CTRL	0x27
 
+#define YT8521_EXT_SMI_SDS_PHY		0xa000
+#define YT8521_EXT_CHIP_CONFIG		0xa001
+#define YT8521_EXT_RGMII_CONFIG1	0xa003
+
 /* 2b00 25m from pll
  * 2b01 25m from xtl *default*
  * 2b10 62.m from pll
@@ -38,6 +43,17 @@
 #define YT8511_DELAY_FE_TX_EN	(0xf << 12)
 #define YT8511_DELAY_FE_TX_DIS	(0x2 << 12)
 
+/* YT8521 SMI_SDS_PHY */
+#define YT8521_SMI_SDS_PHY_UTP	0
+#define YT8521_SMI_SDS_PHY_SDS	BIT(1)
+
+/* YT8521 Chip_Config */
+#define YT8521_SW_RST_N_MODE	BIT(15)
+#define YT8521_RXC_DLY_EN	BIT(8)
+
+/* YT8521 RGMII_Config1 */
+#define YT8521_TX_DELAY_SEL	GENMASK(3, 0)
+
 static int yt8511_read_page(struct phy_device *phydev)
 {
 	return __phy_read(phydev, YT8511_PAGE_SELECT);
@@ -111,6 +127,47 @@ static int yt8511_config_init(struct phy_device *phydev)
 	return phy_restore_page(phydev, oldpage, ret);
 }
 
+static int yt8521_soft_reset(struct phy_device *phydev)
+{
+	phy_modify_paged(phydev, YT8521_EXT_CHIP_CONFIG, YT8511_PAGE,
+			 YT8521_SW_RST_N_MODE, 0);
+
+	return genphy_soft_reset(phydev);
+}
+
+static int yt8521_config_init(struct phy_device *phydev)
+{
+	int oldpage, ret = 0;
+
+	oldpage = phy_select_page(phydev, YT8521_EXT_SMI_SDS_PHY);
+	if (oldpage < 0)
+		goto err_restore_page;
+
+	/* switch to UTP access */
+	ret = __phy_write(phydev, YT8511_PAGE, YT8521_SMI_SDS_PHY_UTP);
+	if (ret < 0)
+		goto err_restore_page;
+
+	/* set tx delay to 3 * 150ps */
+	ret = __phy_write(phydev, YT8511_PAGE_SELECT, YT8521_EXT_RGMII_CONFIG1);
+	if (ret < 0)
+		goto err_restore_page;
+	ret = __phy_modify(phydev, YT8511_PAGE, YT8521_TX_DELAY_SEL, 3);
+	if (ret < 0)
+		goto err_restore_page;
+
+	/* disable rx delay */
+	ret = __phy_write(phydev, YT8511_PAGE_SELECT, YT8521_EXT_CHIP_CONFIG);
+	if (ret < 0)
+		goto err_restore_page;
+	ret = __phy_modify(phydev, YT8511_PAGE, YT8521_RXC_DLY_EN, 0);
+	if (ret < 0)
+		goto err_restore_page;
+
+err_restore_page:
+	return phy_restore_page(phydev, oldpage, ret);
+}
+
 static struct phy_driver motorcomm_phy_drvs[] = {
 	{
 		PHY_ID_MATCH_EXACT(PHY_ID_YT8511),
@@ -121,6 +178,16 @@ static struct phy_driver motorcomm_phy_drvs[] = {
 		.read_page	= yt8511_read_page,
 		.write_page	= yt8511_write_page,
 	},
+	{
+		PHY_ID_MATCH_EXACT(PHY_ID_YT8521),
+		.name		= "YT8521 Gigabit Ethernet",
+		.soft_reset	= yt8521_soft_reset,
+		.config_init	= yt8521_config_init,
+		.suspend	= genphy_suspend,
+		.resume		= genphy_resume,
+		.read_page	= yt8511_read_page,
+		.write_page	= yt8511_write_page,
+	},
 };
 
 module_phy_driver(motorcomm_phy_drvs);
@@ -131,6 +198,7 @@ MODULE_LICENSE("GPL");
 
 static const struct mdio_device_id __maybe_unused motorcomm_tbl[] = {
 	{ PHY_ID_MATCH_EXACT(PHY_ID_YT8511) },
+	{ PHY_ID_MATCH_EXACT(PHY_ID_YT8521) },
 	{ /* sentinal */ }
 };
 
-- 
2.17.1

